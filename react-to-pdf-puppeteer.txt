# Conversão de React para PDF com Puppeteer: Casos Práticos e Soluções Avançadas

## Introdução

A conversão de aplicações React para PDF é uma necessidade comum em vários cenários, como geração de relatórios, faturas, currículos, documentos ou qualquer conteúdo que precise ser salvo em um formato mais permanente. O Puppeteer é uma ferramenta poderosa desenvolvida pelo Google que permite controlar o Chrome/Chromium através de uma API Node.js, tornando-o ideal para gerar PDFs a partir de páginas web.

## Por que não usar a opção de impressão nativa do navegador?

Embora os navegadores ofereçam a opção de "Imprimir para PDF", esta solução apresenta várias limitações:

1. Quebras de página aleatórias em meio a tabelas de dados, gráficos ou componentes React
2. Ausência de cabeçalhos, rodapés e numeração de página personalizados
3. Problemas de UI/UX que tornam o PDF difícil de ler
4. Experiência de usuário complicada (exige cliques manuais)

## Configurando o Puppeteer com React

### Instalação

```bash
npm install puppeteer
# ou
npm install puppeteer-core # versão sem download automático do Chromium
```

### Estrutura básica para geração de PDF

```javascript
const puppeteer = require("puppeteer");

(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto("http://localhost:3000", {
    waitUntil: "networkidle2",
  });
  await page.pdf({ format: "A4", path: "./meu_arquivo.pdf" });
  await browser.close();
})();
```

## Preparando componentes React para impressão

### Transformar conteúdo dinâmico em estático

Ao projetar componentes React que serão convertidos em PDF, é importante considerar que o PDF é um formato estático. Exemplo de adaptação de um componente com abas:

```jsx
// Versão apenas dinâmica
<Table selectedTabIndex="tab1" />

// Versão compatível com PDF (estática)
const tabNames = ['tab1', 'tab2', 'tab3']

(isPrintable ?
  tabNames.map(tabName => <Table key={tabName} selectedTab={tabName} />) :
  <Table selectedTabIndex='tab1' />
);
```

### Controlando quebras de página com CSS

Use a propriedade `break-inside` do CSS para controlar como os componentes são divididos entre páginas:

```css
@media print {
  body {
    font-size: "16px";
    color: "lightgrey";
  }

  .no-break-inside {
    /* evita que componentes sejam divididos entre páginas */
    break-inside: "avoid";
  }

  .break-before {
    /* força início em nova página */
    break-before: "always";
  }
}
```

```jsx
<MyComponent isPrintable={true} className="no-break-inside" />
```

## Implementação com Next.js

Para aplicações Next.js, uma abordagem comum é criar uma rota de API que gera o PDF:

```javascript
// pages/api/generate-pdf.js
import puppeteer from 'puppeteer';

export default async function handler(req, res) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  
  // Navega para a versão imprimível da página
  await page.goto('http://localhost:3000/pagina-imprimivel');
  await page.emulateMediaType('screen');
  
  const pdf = await page.pdf({
    format: 'A4',
    printBackground: true,
    margin: { top: '1cm', right: '1cm', bottom: '1cm', left: '1cm' },
  });
  
  await browser.close();
  
  res.setHeader('Content-Type', 'application/pdf');
  res.setHeader('Content-Disposition', 'attachment; filename=documento.pdf');
  res.send(pdf);
}
```

## Personalizando o PDF gerado

### Cabeçalhos e rodapés personalizados

```javascript
const footerTemplate = `
<style>
  #page-numbers {
    font-size: 10px;
    width: 100%;
    text-align: center;
  }
  .logo {
    height: 20px;
    width: auto;
  }
</style>
<div id="page-numbers">
  <span>Página <span class="pageNumber"></span> de <span class="totalPages"></span></span>
</div>`;

await page.pdf({
  format: 'A4',
  headerTemplate: '<div></div>',
  footerTemplate: footerTemplate,
  displayHeaderFooter: true,
  margin: {
    top: "1cm",
    bottom: "2cm"
  }
});
```

### Opções avançadas para o PDF

```javascript
await page.pdf({
  format: 'A4', // 'Letter', 'Legal', 'Tabloid', etc.
  landscape: false, // orientação
  printBackground: true, // incluir cores de fundo
  scale: 1, // escala (0.1 a 2)
  pageRanges: '1-5, 8', // intervalo de páginas
  preferCSSPageSize: true, // usar dimensões CSS @page
  margin: {
    top: '1cm',
    right: '1cm',
    bottom: '1cm',
    left: '1cm'
  }
});
```

## Otimizações para produção

### Performance e escalabilidade

1. Use instâncias de browser reutilizáveis para múltiplas requisições
2. Implemente um sistema de filas para requisições de PDF em massa
3. Monitore o uso de memória e CPU (o Puppeteer pode consumir recursos significativos)

### Containerização com Docker

```dockerfile
FROM node:16

# Instalar dependências necessárias para o Chromium
RUN apt-get update && apt-get install -y \
    gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 \
    libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 \
    fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget \
    xvfb

# Configurar diretório de trabalho
WORKDIR /app

# Copiar package.json e package-lock.json
COPY package*.json ./

# Instalar dependências
RUN npm install

# Copiar o código fonte
COPY . .

# Comando para executar o serviço
CMD ["node", "server.js"]
```

## Alternativas ao Puppeteer

### react-pdf

Uma biblioteca leve e focada em React que permite criar documentos PDF usando componentes React específicos:

```jsx
import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';

const styles = StyleSheet.create({
  page: { padding: 30 },
  title: { fontSize: 24, marginBottom: 10 }
});

const MyDocument = () => (
  <Document>
    <Page size="A4" style={styles.page}>
      <Text style={styles.title}>Meu Documento PDF</Text>
      <View>
        <Text>Conteúdo do documento aqui</Text>
      </View>
    </Page>
  </Document>
);
```

Vantagens em relação ao Puppeteer:
- Consumo de recursos muito menor (poucos MB de RAM vs GB no Puppeteer)
- Geração de PDF muito mais rápida
- Tamanhos de arquivo menores
- Funciona tanto no frontend quanto no backend
- PDFs interativos com texto pesquisável, links e anotações

## Conclusão

O Puppeteer é uma ferramenta poderosa para gerar PDFs a partir de aplicações React, permitindo criar documentos altamente personalizados que preservam o layout e a aparência da sua aplicação web. Com as técnicas corretas de CSS para quebras de página e adaptações para conteúdo estático, é possível criar PDFs profissionais diretamente a partir do seu código React.

A escolha entre Puppeteer e alternativas como react-pdf dependerá das necessidades específicas do seu projeto, considerando fatores como fidelidade visual, recursos do servidor, volume de geração de PDFs e necessidade de interatividade nos documentos gerados. 